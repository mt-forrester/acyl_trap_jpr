),
color = case_when(
sample_type == "brain" ~ "#2AA198", # Teal for brain
sample_type == "MLE" ~ "#005AB5",    # Purple for MLE
TRUE ~ "grey"                      # Default color
))
# Combine with the filtered and ranked combined_bound data
filtered_combined_bound <- combined_bound %>%
filter(!is.na(adj_p_value)) %>%
arrange(Log2FC) %>%
mutate(Rank = row_number())
combined_data_with_labels <- filtered_combined_bound %>%
left_join(specified_labels[, c("Index", "cys_experiment", "label", "color")], by = c("Index", "cys_experiment"))
# Plotting
ggplot(combined_data_with_labels, aes(x = Rank, y = Log2FC)) +
geom_point(aes(color = ifelse(database_site_match == "experimentally_validated", "#D33682", "grey")), alpha = 0.2) +
geom_point(data = filter(combined_data_with_labels, database_site_match == "experimentally_validated"), color = "#D33682", alpha = 0.8) +
geom_label_repel(data = filter(combined_data_with_labels, !is.na(label)),
aes(label = label, color = color), nudge_x = -max(combined_data_with_labels$Rank) * 0.40, nudge_y = 1, size = 4, segment.color = "grey50",
xlim = c(NA, max(combined_data_with_labels$Rank)),
label.padding = unit(0.2, "lines")) +  # Adjust padding around labels
scale_color_identity() +
guides(color = FALSE) +
labs(x = "", y = "Log2 Fold Change", title = "Overlay of Experimentally Validated and Novel Putative S-Acylated Sites") +
my_rank_order_plot_theme() +  # Apply the custom theme
scale_y_continuous(limits = c(-3, 8))
# Define the custom theme function
my_rank_order_plot_theme <- function() {
theme_minimal() +
theme(
plot.title = element_text(size = 16),              # Set plot title font size
axis.title.y = element_text(size = 16),            # Set y-axis title font size
axis.text.y = element_text(size = 18),             # Set y-axis labels font size
axis.title.x = element_text(size = 16),            # Set y-axis title font size
axis.text.x = element_text(size = 16),             # Set y-axis labels font size
legend.title = element_blank()                     # Optionally remove legend title if not needed
)
}
# Assuming combined_bound is your original dataframe
# Create a new dataframe for labeled points based on the specified conditions
specified_labels <- combined_bound %>%
filter((Index == "P35762" & cys_experiment == 6) |
(Index == "Q8BWS5" & cys_experiment == 752) |
(Index == "Q6PHZ8" & cys_experiment == 43) |
(Index == "Q9QXW9" & cys_experiment == 474) |
(Index == "Q3TJD7" & cys_experiment == 329) |
(Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE") |
(Index == "Q99N57" & cys_experiment == 637) |
(Index == "Q91ZN5" & cys_experiment == 80) |
(Index == "Q91VE0" & cys_experiment == 436) |
(Index == "Q8R0S2" & cys_experiment == 960)) %>%
mutate(label = case_when(
Index == "P35762" & cys_experiment == 6 ~ "CD81_C6",
Index == "Q8BWS5" & cys_experiment == 752 ~ "Gprin3_C752/753",
Index == "Q6PHZ8" & cys_experiment == 43 ~ "Kcnip4_C43",
Index == "Q9QXW9" & cys_experiment == 474 ~ "Slc7a8_C474",
Index == "Q3TJD7" & cys_experiment == 329 ~ "Pdlim7_C329/332",
Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE" ~ "CD99_C166",
Index == "Q99N57" & cys_experiment == 637 ~ "Raf1_C637",
Index == "Q91ZN5" & cys_experiment == 80 ~ "Slc35b2_C80",
Index == "Q91VE0" & cys_experiment == 436 ~ "Slc27a4_C436/439",
Index == "Q8R0S2" & cys_experiment == 960 ~ "Iqsec1_C960",
TRUE ~ NA_character_
),
color = case_when(
sample_type == "brain" ~ "#2AA198", # Teal for brain
sample_type == "MLE" ~ "#005AB5",    # Purple for MLE
TRUE ~ "grey"                      # Default color
))
# Combine with the filtered and ranked combined_bound data
filtered_combined_bound <- combined_bound %>%
filter(!is.na(adj_p_value)) %>%
arrange(Log2FC) %>%
mutate(Rank = row_number())
combined_data_with_labels <- filtered_combined_bound %>%
left_join(specified_labels[, c("Index", "cys_experiment", "label", "color")], by = c("Index", "cys_experiment"))
# Plotting
ggplot(combined_data_with_labels, aes(x = Rank, y = Log2FC)) +
geom_point(aes(color = ifelse(database_site_match == "experimentally_validated", "#D33682", "grey")), alpha = 0.2) +
geom_point(data = filter(combined_data_with_labels, database_site_match == "experimentally_validated"), color = "#D33682", alpha = 0.8) +
geom_label_repel(data = filter(combined_data_with_labels, !is.na(label)),
aes(label = label, color = color), nudge_x = -max(combined_data_with_labels$Rank) * 0.40, nudge_y = 1, size = 4, segment.color = "grey50",
xlim = c(NA, max(combined_data_with_labels$Rank)),
label.padding = unit(0.2, "lines")) +  # Adjust padding around labels
scale_color_identity() +
guides(color = FALSE) +
labs(x = "", y = "Log2 Fold Change", title = "Validated and Novel Putative S-Acylated Sites") +
my_rank_order_plot_theme() +  # Apply the custom theme
scale_y_continuous(limits = c(-3, 8))
# Define the custom theme function
my_rank_order_plot_theme <- function() {
theme_minimal() +
theme(
plot.title = element_text(size = 16),              # Set plot title font size
axis.title.y = element_text(size = 16),            # Set y-axis title font size
axis.text.y = element_text(size = 18),             # Set y-axis labels font size
axis.title.x = element_text(size = 16),            # Set y-axis title font size
axis.text.x = element_text(size = 16),             # Set y-axis labels font size
legend.title = element_blank()                     # Optionally remove legend title if not needed
)
}
# Assuming combined_bound is your original dataframe
# Create a new dataframe for labeled points based on the specified conditions
specified_labels <- combined_bound %>%
filter((Index == "P35762" & cys_experiment == 6) |
(Index == "Q8BWS5" & cys_experiment == 752) |
(Index == "Q6PHZ8" & cys_experiment == 43) |
(Index == "Q9QXW9" & cys_experiment == 474) |
(Index == "Q3TJD7" & cys_experiment == 329) |
(Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE") |
(Index == "Q99N57" & cys_experiment == 637) |
(Index == "Q91ZN5" & cys_experiment == 80) |
(Index == "Q91VE0" & cys_experiment == 436) |
(Index == "Q8R0S2" & cys_experiment == 960)) %>%
mutate(label = case_when(
Index == "P35762" & cys_experiment == 6 ~ "CD81_C6",
Index == "Q8BWS5" & cys_experiment == 752 ~ "Gprin3_C752/753",
Index == "Q6PHZ8" & cys_experiment == 43 ~ "Kcnip4_C43",
Index == "Q9QXW9" & cys_experiment == 474 ~ "Slc7a8_C474",
Index == "Q3TJD7" & cys_experiment == 329 ~ "Pdlim7_C329/332",
Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE" ~ "CD99_C166",
Index == "Q99N57" & cys_experiment == 637 ~ "Raf1_C637",
Index == "Q91ZN5" & cys_experiment == 80 ~ "Slc35b2_C80",
Index == "Q91VE0" & cys_experiment == 436 ~ "Slc27a4_C436/439",
Index == "Q8R0S2" & cys_experiment == 960 ~ "Iqsec1_C960",
TRUE ~ NA_character_
),
color = case_when(
sample_type == "brain" ~ "#2AA198", # Teal for brain
sample_type == "MLE" ~ "#005AB5",    # Purple for MLE
TRUE ~ "grey"                      # Default color
))
# Combine with the filtered and ranked combined_bound data
filtered_combined_bound <- combined_bound %>%
filter(!is.na(adj_p_value)) %>%
arrange(Log2FC) %>%
mutate(Rank = row_number())
combined_data_with_labels <- filtered_combined_bound %>%
left_join(specified_labels[, c("Index", "cys_experiment", "label", "color")], by = c("Index", "cys_experiment"))
# Plotting
ggplot(combined_data_with_labels, aes(x = Rank, y = Log2FC)) +
geom_point(aes(color = ifelse(database_site_match == "experimentally_validated", "#D33682", "black")), alpha = 0.1) +
geom_point(data = filter(combined_data_with_labels, database_site_match == "experimentally_validated"), color = "#D33682", alpha = 0.8) +
geom_label_repel(data = filter(combined_data_with_labels, !is.na(label)),
aes(label = label, color = color), nudge_x = -max(combined_data_with_labels$Rank) * 0.40, nudge_y = 1, size = 4, segment.color = "grey50",
xlim = c(NA, max(combined_data_with_labels$Rank)),
label.padding = unit(0.2, "lines")) +  # Adjust padding around labels
scale_color_identity() +
guides(color = FALSE) +
labs(x = "", y = "Log2 Fold Change", title = "Validated and Novel Putative S-Acylated Sites") +
my_rank_order_plot_theme() +  # Apply the custom theme
scale_y_continuous(limits = c(-3, 8))
# Define the custom theme function
my_rank_order_plot_theme <- function() {
theme_minimal() +
theme(
plot.title = element_text(size = 16),              # Set plot title font size
axis.title.y = element_text(size = 16),            # Set y-axis title font size
axis.text.y = element_text(size = 18),             # Set y-axis labels font size
axis.title.x = element_text(size = 16),            # Set y-axis title font size
axis.text.x = element_text(size = 16),             # Set y-axis labels font size
legend.title = element_blank()                     # Optionally remove legend title if not needed
)
}
# Assuming combined_bound is your original dataframe
# Create a new dataframe for labeled points based on the specified conditions
specified_labels <- combined_bound %>%
filter((Index == "P35762" & cys_experiment == 6) |
(Index == "Q8BWS5" & cys_experiment == 752) |
(Index == "Q6PHZ8" & cys_experiment == 43) |
(Index == "Q9QXW9" & cys_experiment == 474) |
(Index == "Q3TJD7" & cys_experiment == 329) |
(Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE") |
(Index == "Q99N57" & cys_experiment == 637) |
(Index == "Q91ZN5" & cys_experiment == 80) |
(Index == "Q91VE0" & cys_experiment == 436) |
(Index == "Q8R0S2" & cys_experiment == 960)) %>%
mutate(label = case_when(
Index == "P35762" & cys_experiment == 6 ~ "CD81_C6",
Index == "Q8BWS5" & cys_experiment == 752 ~ "Gprin3_C752/753",
Index == "Q6PHZ8" & cys_experiment == 43 ~ "Kcnip4_C43",
Index == "Q9QXW9" & cys_experiment == 474 ~ "Slc7a8_C474",
Index == "Q3TJD7" & cys_experiment == 329 ~ "Pdlim7_C329/332",
Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE" ~ "CD99_C166",
Index == "Q99N57" & cys_experiment == 637 ~ "Raf1_C637",
Index == "Q91ZN5" & cys_experiment == 80 ~ "Slc35b2_C80",
Index == "Q91VE0" & cys_experiment == 436 ~ "Slc27a4_C436/439",
Index == "Q8R0S2" & cys_experiment == 960 ~ "Iqsec1_C960",
TRUE ~ NA_character_
),
color = case_when(
sample_type == "brain" ~ "#2AA198", # Teal for brain
sample_type == "MLE" ~ "#005AB5",    # Purple for MLE
TRUE ~ "grey"                      # Default color
))
# Combine with the filtered and ranked combined_bound data
filtered_combined_bound <- combined_bound %>%
filter(!is.na(adj_p_value)) %>%
arrange(Log2FC) %>%
mutate(Rank = row_number())
combined_data_with_labels <- filtered_combined_bound %>%
left_join(specified_labels[, c("Index", "cys_experiment", "label", "color")], by = c("Index", "cys_experiment"))
# Plotting
ggplot(combined_data_with_labels, aes(x = Rank, y = Log2FC)) +
geom_point(aes(color = ifelse(database_site_match == "experimentally_validated", "#D33682", "gray20")), alpha = 0.2) +
geom_point(data = filter(combined_data_with_labels, database_site_match == "experimentally_validated"), color = "#D33682", alpha = 0.8) +
geom_label_repel(data = filter(combined_data_with_labels, !is.na(label)),
aes(label = label, color = color), nudge_x = -max(combined_data_with_labels$Rank) * 0.40, nudge_y = 1, size = 4, segment.color = "grey50",
xlim = c(NA, max(combined_data_with_labels$Rank)),
label.padding = unit(0.2, "lines")) +  # Adjust padding around labels
scale_color_identity() +
guides(color = FALSE) +
labs(x = "", y = "Log2 Fold Change", title = "Validated and Novel Putative S-Acylated Sites") +
my_rank_order_plot_theme() +  # Apply the custom theme
scale_y_continuous(limits = c(-3, 8))
# Define the custom theme function
my_rank_order_plot_theme <- function() {
theme_minimal() +
theme(
plot.title = element_text(size = 16),              # Set plot title font size
axis.title.y = element_text(size = 16),            # Set y-axis title font size
axis.text.y = element_text(size = 18),             # Set y-axis labels font size
axis.title.x = element_text(size = 16),            # Set y-axis title font size
axis.text.x = element_text(size = 16),             # Set y-axis labels font size
legend.title = element_blank()                     # Optionally remove legend title if not needed
)
}
# Assuming combined_bound is your original dataframe
# Create a new dataframe for labeled points based on the specified conditions
specified_labels <- combined_bound %>%
filter((Index == "P35762" & cys_experiment == 6) |
(Index == "Q8BWS5" & cys_experiment == 752) |
(Index == "Q6PHZ8" & cys_experiment == 43) |
(Index == "Q9QXW9" & cys_experiment == 474) |
(Index == "Q3TJD7" & cys_experiment == 329) |
(Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE") |
(Index == "Q99N57" & cys_experiment == 637) |
(Index == "Q91ZN5" & cys_experiment == 80) |
(Index == "Q91VE0" & cys_experiment == 436) |
(Index == "Q8R0S2" & cys_experiment == 960)) %>%
mutate(label = case_when(
Index == "P35762" & cys_experiment == 6 ~ "CD81_C6",
Index == "Q8BWS5" & cys_experiment == 752 ~ "Gprin3_C752/753",
Index == "Q6PHZ8" & cys_experiment == 43 ~ "Kcnip4_C43",
Index == "Q9QXW9" & cys_experiment == 474 ~ "Slc7a8_C474",
Index == "Q3TJD7" & cys_experiment == 329 ~ "Pdlim7_C329/332",
Index == "Q8VCN6" & cys_experiment == 166 & sample_type == "MLE" ~ "CD99_C166",
Index == "Q99N57" & cys_experiment == 637 ~ "Raf1_C637",
Index == "Q91ZN5" & cys_experiment == 80 ~ "Slc35b2_C80",
Index == "Q91VE0" & cys_experiment == 436 ~ "Slc27a4_C436/439",
Index == "Q8R0S2" & cys_experiment == 960 ~ "Iqsec1_C960",
TRUE ~ NA_character_
),
color = case_when(
sample_type == "brain" ~ "#2AA198", # Teal for brain
sample_type == "MLE" ~ "#005AB5",    # Purple for MLE
TRUE ~ "grey"                      # Default color
))
# Combine with the filtered and ranked combined_bound data
filtered_combined_bound <- combined_bound %>%
filter(!is.na(adj_p_value)) %>%
arrange(Log2FC) %>%
mutate(Rank = row_number())
combined_data_with_labels <- filtered_combined_bound %>%
left_join(specified_labels[, c("Index", "cys_experiment", "label", "color")], by = c("Index", "cys_experiment"))
# Plotting
ggplot(combined_data_with_labels, aes(x = Rank, y = Log2FC)) +
geom_point(aes(color = ifelse(database_site_match == "experimentally_validated", "#D33682", "gray")), alpha = 0.3) +
geom_point(data = filter(combined_data_with_labels, database_site_match == "experimentally_validated"), color = "#D33682", alpha = 0.8) +
geom_label_repel(data = filter(combined_data_with_labels, !is.na(label)),
aes(label = label, color = color), nudge_x = -max(combined_data_with_labels$Rank) * 0.40, nudge_y = 1, size = 4, segment.color = "grey50",
xlim = c(NA, max(combined_data_with_labels$Rank)),
label.padding = unit(0.2, "lines")) +  # Adjust padding around labels
scale_color_identity() +
guides(color = FALSE) +
labs(x = "", y = "Log2 Fold Change", title = "Validated and Novel Putative S-Acylated Sites") +
my_rank_order_plot_theme() +  # Apply the custom theme
scale_y_continuous(limits = c(-3, 8))
# Define custom theme
my_theme <- theme(
axis.line = element_line(colour = "black", size = 1),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 24),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
plot.title = element_text(size = 24, hjust = 0.5)
)
##### Visualization of the CVs
# specify that rename and select functions should be used from dplyr
# this is necessary because later packages were masking rename from dplyr
rename <- dplyr::rename
select <- dplyr::select
# Reshape brain_unbound for ggplot
flow_long <- brain_unbound %>%
select(Index, CV_no_HA, CV_plus_HA) %>%
gather(key = "Condition", value = "CV", -Index)
flow_long$type <- "Unbound"
# Reshape brain_bound for ggplot
bound_long <- brain_bound %>%
select(Index, CV_no_HA, CV_plus_HA) %>%
gather(key = "Condition", value = "CV", -Index)
bound_long$type <- "Bound"  # Capitalize "bound" here
# Combining the datasets
brain_CV_combined <- rbind(flow_long, bound_long)
# Set the order of the levels for type
brain_CV_combined$type <- factor(brain_CV_combined$type, levels = c("Unbound", "Bound"))
# Use my_theme and then make adjustments specific to this plot
brain_plot <- ggplot(brain_CV_combined, aes(x = type, y = CV, fill = type)) +
geom_boxplot() +
scale_fill_manual(values = c("Unbound" = "green", "Bound" = "maroon1")) +  # Ensure colors match the capitalized "bound"
coord_cartesian(ylim = c(0, 100)) +
labs(
title = "Coefficient of Variation - Brain",
y = "CV (%)",
x = NULL  # This omits the x-axis label
) +
my_theme +  # Use the custom theme you created
theme(
legend.position = "none"  # Remove legend
# Note: axis.text.x, axis.text.y, and axis.line are already set by my_theme
)
# Print the CV boxplot
print(brain_plot)
# Save the plot to a PDF
ggsave(filename = "brain_CV_boxplot.pdf", plot = brain_plot, width = 7, height = 5)
# Calculate median CV for each type
brain_median_CVs <- brain_CV_combined %>%
group_by(type) %>%
summarise(brain_median_CV = median(CV, na.rm = TRUE))
# Print the median CVs to console
print(brain_median_CVs)
# remove dataframes
rm(flow_long)
rm(bound_long)
# Define custom theme
my_theme <- theme(
axis.line = element_line(colour = "black", size = 1),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 24),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
plot.title = element_text(size = 24, hjust = 0.5)
)
##### Visualization of the CVs
# specify that rename and select functions should be used from dplyr
# this is necessary because later packages were masking rename from dplyr
rename <- dplyr::rename
select <- dplyr::select
# Reshape MLE_unbound for ggplot
flow_long <- MLE_unbound %>%
select(Index, CV_no_HA, CV_plus_HA) %>%
gather(key = "Condition", value = "CV", -Index)
flow_long$type <- "Unbound"
# Reshape MLE_bound for ggplot
bound_long <- MLE_bound %>%
select(Index, CV_no_HA, CV_plus_HA) %>%
gather(key = "Condition", value = "CV", -Index)
bound_long$type <- "Bound"  # Capitalize "Bound" here
# Combining the datasets
MLE_CV_combined <- rbind(flow_long, bound_long)
# Set the order of the levels for type
MLE_CV_combined$type <- factor(MLE_CV_combined$type, levels = c("Unbound", "Bound"))
# Use my_theme and then make adjustments specific to this plot
MLE_plot <- ggplot(MLE_CV_combined, aes(x = type, y = CV, fill = type)) +
geom_boxplot() +
scale_fill_manual(values = c("Unbound" = "green", "Bound" = "maroon1")) +  # Ensure colors match the capitalized "Bound"
coord_cartesian(ylim = c(0, 100)) +
labs(
title = "Coefficient of Variation - MLE12",
y = "CV (%)",
x = NULL  # This omits the x-axis label
) +
my_theme +  # Use the custom theme you created
theme(
legend.position = "none"  # Remove legend
# Note: axis.text.x, axis.text.y, and axis.line are already set by my_theme
)
# Print the CV boxplot
print(MLE_plot)
# Save the plot to a PDF
ggsave(filename = "MLE_CV_boxplot.pdf", plot = MLE_plot, width = 7, height = 5)
# Calculate median CV for each type
MLE_median_CVs <- MLE_CV_combined %>%
group_by(type) %>%
summarise(MLE_median_CV = median(CV, na.rm = TRUE))
# Print the median CVs to console
print(MLE_median_CVs)
# remove dataframes
rm(flow_long)
rm(bound_long)
library(readr)
brain_bound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/brain_bound_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
brain_unbound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/brain_flowthrough_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
MLE_bound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/MLE_bound_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
MLE_unbound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/MLE_flowthrough_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
brain_bound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/brain_bound_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
brain_unbound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/brain_flowthrough_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
MLE_bound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/MLE_bound_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
MLE_unbound_ion <- read_delim("TMT_output_philosopher_for_R_analysis/MLE_flowthrough_ion.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(ggplot2)
my_barplot_theme <- function() {
theme_minimal() +
theme(
plot.title = element_text(size = 16),            # Title font size
axis.title.x = element_text(size = 16),          # X-axis title font size
axis.title.y = element_text(size = 16),          # Y-axis title font size
axis.text.x = element_text(size = 14),           # X-axis labels font size
axis.text.y = element_text(size = 18)            # Y-axis labels font size
)
}
# Calculate percentage of rows with at least one "C" in 'Peptide Sequence' for each dataframe
calculate_percentage_C <- function(df, peptide_col_name) {
# Count rows with at least one "C" in the specified column
rows_with_C <- sum(grepl("C", df[[peptide_col_name]], fixed = TRUE))
# Calculate percentage
percentage_with_C <- (rows_with_C / nrow(df)) * 100
return(percentage_with_C)
}
# Apply the function to each dataframe
percentage_brain_bound_ion <- calculate_percentage_C(brain_bound_ion, 'Peptide Sequence')
percentage_brain_unbound_ion <- calculate_percentage_C(brain_unbound_ion, 'Peptide Sequence')
percentage_MLE_bound_ion <- calculate_percentage_C(MLE_bound_ion, 'Peptide Sequence')
percentage_MLE_unbound_ion <- calculate_percentage_C(MLE_unbound_ion, 'Peptide Sequence')
# Print the results
cat("Percentage of rows with at least one 'C' in 'Peptide Sequence':\n")
cat("Brain Bound Ion: ", percentage_brain_bound_ion, "%\n")
cat("Brain Unbound Ion: ", percentage_brain_unbound_ion, "%\n")
cat("MLE Bound Ion: ", percentage_MLE_bound_ion, "%\n")
cat("MLE Unbound Ion: ", percentage_MLE_unbound_ion, "%\n")
# Assuming the percentage calculation code has been run and the variables are set
# Create a dataframe for plotting
percentage_data <- data.frame(
dataset = c("Brain Bound", "Brain Unbound", "MLE Bound", "MLE Unbound"),
percentage = c(percentage_brain_bound_ion, percentage_brain_unbound_ion,
percentage_MLE_bound_ion, percentage_MLE_unbound_ion)
)
# Plotting
ggplot(percentage_data, aes(x = dataset, y = percentage, fill = dataset)) +
geom_bar(stat = "identity", color = "black", fill = "grey") + # Use fill to color bars if needed
theme_minimal() +
labs(title = "Percentage of Precursor Ions with 1 or More Cysteine",
x = "",
y = "Cys Containing Precursor Ions (%)"
) +
my_barplot_theme()  # Apply the custom theme
# Save the plot
ggsave("percentage_of_C_in_peptide_sequence.pdf", width = 8, height = 4)
# Modified function to count "C" in each peptide sequence
calculate_C_counts <- function(df, peptide_col_name) {
# Count "C" in each row of the specified column
C_counts <- sapply(df[[peptide_col_name]], function(sequence) {
sum(strsplit(sequence, "")[[1]] == "C")
})
# Return the counts
return(C_counts)
}
# Function to calculate mean and median from counts
calculate_mean_median <- function(C_counts) {
mean_value <- mean(C_counts)
median_value <- median(C_counts)
list(mean = mean_value, median = median_value)
}
# Updated function to apply the calculations
calculate_stats <- function(df, peptide_col_name) {
C_counts <- calculate_C_counts(df, peptide_col_name)
calculate_mean_median(C_counts)
}
# Apply the function to each dataframe and calculate statistics
stats_brain_bound_ion <- calculate_stats(brain_bound_ion, 'Peptide Sequence')
stats_brain_unbound_ion <- calculate_stats(brain_unbound_ion, 'Peptide Sequence')
stats_MLE_bound_ion <- calculate_stats(MLE_bound_ion, 'Peptide Sequence')
stats_MLE_unbound_ion <- calculate_stats(MLE_unbound_ion, 'Peptide Sequence')
# Print mean and median counts of 'C' in peptide sequences
cat("Mean and Median Counts of 'C' in Peptide Sequences:\n")
cat("Brain Bound - Mean:", stats_brain_bound_ion$mean, "Median:", stats_brain_bound_ion$median, "\n")
cat("Brain Unbound - Mean:", stats_brain_unbound_ion$mean, "Median:", stats_brain_unbound_ion$median, "\n")
cat("MLE Bound - Mean:", stats_MLE_bound_ion$mean, "Median:", stats_MLE_bound_ion$median, "\n")
cat("MLE Unbound - Mean:", stats_MLE_unbound_ion$mean, "Median:", stats_MLE_unbound_ion$median, "\n")
# Create a dataframe for plotting the mean values of Mean Number Cys per Precursos
stats_data <- data.frame(
dataset = c("Brain Bound", "Brain Unbound", "MLE Bound", "MLE Unbound"),
mean = c(stats_brain_bound_ion$mean, stats_brain_unbound_ion$mean,
stats_MLE_bound_ion$mean, stats_MLE_unbound_ion$mean)
)
# Example plot using the custom theme
ggplot(stats_data, aes(x = dataset, y = mean, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", fill = "grey") +
labs(
title = "Number of Cys per Precursor Ion",
x = "",
y = "Cys Count (Mean)"
) +
my_barplot_theme()  # Apply the custom theme
# Save the plot
ggsave("C_count_in_peptide_sequence_mean.pdf", width = 8, height = 4)
